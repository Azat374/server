==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\.env.example ====
#SQLALCHEMY_DATABASE_URI=sqlite:///database/math_checker.db
SECRET_KEY=23e629b053aeda6ff423b58a99f861cecd1670e05af7bb9ea55757f419e2a0dcdab40e36e772fbf55ef0ba5533527e4360ad2c25b740336049a9d30667ca126c
DATABASE_PATH = os.path.join(BASE_DIR, "database", "math_checker.db")
SQLALCHEMY_DATABASE_URI = "sqlite:///" + DATABASE_PATH



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\app.py ====
from flask import Flask
from flask_cors import CORS
from config import Config
from models import db
from utils.Auth.auth import auth_bp
from tasks import tasks_bp
from solutions import solutions_bp
from reports import reports_bp

app = Flask(__name__)
app.config.from_object(Config)
CORS(app)

db.init_app(app)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Blueprints
app.register_blueprint(auth_bp)
app.register_blueprint(tasks_bp)
app.register_blueprint(solutions_bp)
app.register_blueprint(reports_bp)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
with app.app_context():
    db.create_all()

if __name__ == "__main__":
    app.run(debug=True)



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\checker.py ====
import sympy as sp

def safe_sympify(expr):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ sympy-—Ñ–æ—Ä–º–∞—Ç."""
    try:
        if expr == "LIMIT":
            # –ï—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç LIMIT, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ-—Ç–æ
            # –ù–æ –ª—É—á—à–µ –≤–æ–æ–±—â–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –µ–≥–æ –∫–∞–∫ expr :)
            return sp.Integer(0)  # –∑–∞–≥–ª—É—à–∫–∞
        expr = expr.replace("e^{", "exp(").replace(r"\ln", "log")
        return sp.sympify(expr)
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è '{expr}': {e}")

def check_algebraic_step(prev_expr_str, curr_expr_str, tolerance=1e-6):
    try:
        # –ï—Å–ª–∏ –≤ prev_expr_str = "LIMIT", –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        if prev_expr_str == "LIMIT":
            return {"is_correct": True, "error_type": None, "hint": "LIMIT –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω."}

        prev_expr = sp.simplify(safe_sympify(prev_expr_str))
        curr_expr = sp.simplify(safe_sympify(curr_expr_str))
        if prev_expr.equals(curr_expr):
            return {"is_correct": True, "error_type": None, "hint": ""}
        # –î–æ–ø.—á–∏—Å–ª–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        for val in [1, 2, 3]:
            if abs(prev_expr.subs({'x': val}) - curr_expr.subs({'x': val})) > tolerance:
                return {
                    "is_correct": False,
                    "error_type": "algebraic_error",
                    "hint": "–û—à–∏–±–∫–∞ –≤ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–Ω–µ—Å–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è."
                }
        return {"is_correct": True, "error_type": None, "hint": ""}
    except Exception as e:
        return {"is_correct": False, "error_type": "parse_error", "hint": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}"}

def check_limit(last_expr_str, expected_limit_str):
    try:
        x = sp.Symbol('x')
        last_expr = safe_sympify(last_expr_str)
        computed_limit = sp.limit(last_expr, x, sp.oo)
        expected_limit = safe_sympify(expected_limit_str)
        if sp.simplify(computed_limit - expected_limit) == 0:
            return {"is_correct": True, "computed_limit": computed_limit, "error_type": None, "hint": ""}
        else:
            return {
                "is_correct": False,
                "computed_limit": computed_limit,
                "error_type": "limit_error",
                "hint": f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–µ–¥–µ–ª: {expected_limit}"
            }
    except Exception as e:
        return {
            "is_correct": False,
            "error_type": "limit_parse_error",
            "hint": f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–µ–¥–µ–ª–∞: {str(e)}"
        }



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\config.py ====
import os

BASE_DIR = os.path.abspath(os.path.dirname(__file__))
DATABASE_PATH = os.path.join(BASE_DIR, "database", "math_checker.db")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
print("DATABASE_PATH:", DATABASE_PATH)  # üîπ –í—ã–≤–æ–¥ –ø—É—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å

SQLALCHEMY_DATABASE_URI = f"sqlite:///{DATABASE_PATH}"
SQLALCHEMY_TRACK_MODIFICATIONS = False
import os
from dotenv import load_dotenv

load_dotenv()

BASE_DIR = os.path.abspath(os.path.dirname(__file__))
DATABASE_PATH = os.path.join(BASE_DIR, "database", "math_checker.db")

class Config:
    SECRET_KEY = os.getenv('SECRET_KEY', '23e629b053aeda6ff423b58a99f861cecd1670e05af7bb9ea55757f419e2a0dcdab40e36e772fbf55ef0ba5533527e4360ad2c25b740336049a9d30667ca126c')
    SQLALCHEMY_DATABASE_URI = f"sqlite:///{DATABASE_PATH}"
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\models.py ====
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

db = SQLAlchemy()

class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    firstname = db.Column(db.String(100), nullable=False)
    lastname = db.Column(db.String(100), nullable=False)
    username = db.Column(db.String(100), unique=True, nullable=False)
    email = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    bio = db.Column(db.Text, default="")
    image = db.Column(db.String(300), default="")
    role = db.Column(db.String(50), default="student")  # –∏–ª–∏ "admin"
    chat_history = db.Column(db.Text)  # –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å JSON –∫–∞–∫ —Å—Ç—Ä–æ–∫—É

    solutions = db.relationship('Solution', backref='user', lazy=True)

class Task(db.Model):
    __tablename__ = 'tasks'
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text)
    expression = db.Column(db.String(500), nullable=False)  # –∏—Å—Ö–æ–¥–Ω–æ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    limitVar = db.Column(db.String(50), nullable=False)      # –Ω–∞–ø—Ä–∏–º–µ—Ä "x->‚àû"
    expected_limit = db.Column(db.String(100), nullable=False)

    solutions = db.relationship('Solution', backref='task', lazy=True)

class Solution(db.Model):
    __tablename__ = 'solutions'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    task_id = db.Column(db.Integer, db.ForeignKey('tasks.id'), nullable=False)
    status = db.Column(db.String(50), default="in_progress")  # in_progress, completed, error
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    steps = db.relationship('Step', backref='solution', lazy=True)

class Step(db.Model):
    __tablename__ = 'steps'
    id = db.Column(db.Integer, primary_key=True)
    solution_id = db.Column(db.Integer, db.ForeignKey('solutions.id'), nullable=False)
    step_number = db.Column(db.Integer, nullable=False)
    input_expr = db.Column(db.String(500), nullable=False)
    is_correct = db.Column(db.Boolean, default=True)
    error_type = db.Column(db.String(100))
    hint = db.Column(db.String(300))



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\reports.py ====
import os
import logging
import io
from datetime import datetime
from flask import Blueprint, request, send_file, jsonify
from models import db, Solution, User, Task, Step
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

reports_bp = Blueprint('reports', __name__, url_prefix='/api/reports')

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
font_regular_path = os.path.join(BASE_DIR, "fonts", "DejaVuSans.ttf")
font_bold_path = os.path.join(BASE_DIR, "fonts", "DejaVuSans-Bold.ttf")
logging.info("–ü—É—Ç—å –∫ DejaVuSans: %s", font_regular_path)
logging.info("–ü—É—Ç—å –∫ DejaVuSans-Bold: %s", font_bold_path)

if not os.path.exists(font_regular_path) or not os.path.exists(font_bold_path):
    logging.error("–§–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —à—Ä–∏—Ñ—Ç–æ–≤.")
else:
    pdfmetrics.registerFont(TTFont('DejaVuSans', font_regular_path))
    pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', font_bold_path))

def wrap_text(text, max_width, c_obj, font, font_size):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–∫, —á—Ç–æ–±—ã —à–∏—Ä–∏–Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª–∞ max_width.
    """
    words = text.split()
    lines = []
    current_line = ""
    for word in words:
        test_line = f"{current_line} {word}".strip() if current_line else word
        if c_obj.stringWidth(test_line, font, font_size) <= max_width:
            current_line = test_line
        else:
            if current_line:
                lines.append(current_line)
            current_line = word
    if current_line:
        lines.append(current_line)
    return lines

@reports_bp.route('/pdf', methods=['POST'])
def generate_pdf_report():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–æ—Ç—á–µ—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–µ—à–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ä–∞–∑–±–æ—Ä–æ–º –æ—à–∏–±–æ–∫ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏.
    –û–∂–∏–¥–∞–µ—Ç—Å—è JSON —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: period (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2024-01-01:2024-02-01"),
    task_id –∏ student_id (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    """
    try:
        data = request.json
        period = data.get("period")  # —Ñ–æ—Ä–º–∞—Ç "YYYY-MM-DD:YYYY-MM-DD"
        task_id = data.get("task_id")
        student_id = data.get("student_id")

        query = Solution.query
        if period:
            try:
                start_str, end_str = period.split(":")
                start_date = datetime.strptime(start_str, "%Y-%m-%d")
                end_date = datetime.strptime(end_str, "%Y-%m-%d")
                # –†–∞—Å—à–∏—Ä—è–µ–º –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
                end_date = end_date.replace(hour=23, minute=59, second=59)
                query = query.filter(Solution.created_at >= start_date, Solution.created_at <= end_date)
            except Exception as e:
                logging.error("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: %s", e)
                return jsonify({"message": "Invalid period format. Use YYYY-MM-DD:YYYY-MM-DD"}), 400
        if task_id:
            query = query.filter(Solution.task_id == task_id)
        if student_id:
            query = query.filter(Solution.user_id == student_id)

        solutions = query.all()

        buffer = io.BytesIO()
        c = canvas.Canvas(buffer, pagesize=letter)
        width, height = letter
        margin = 50
        max_text_width = width - 2 * margin
        y = height - margin

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —à–∞–ø–∫–∏ –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        def draw_header(c_obj):
            c_obj.setFont("DejaVuSans-Bold", 20)
            c_obj.drawCentredString(width / 2, height - margin + 20, "–û—Ç—á–µ—Ç –ø–æ —Ä–µ—à–µ–Ω–∏—è–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            c_obj.line(margin, height - margin + 10, width - margin, height - margin + 10)

        draw_header(c)
        y -= 40
        c.setFont("DejaVuSans", 12)

        if not solutions:
            wrapped = wrap_text("–ù–µ—Ç —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.", max_text_width, c, "DejaVuSans", 12)
            for line in wrapped:
                c.drawString(margin, y, line)
                y -= 15
        else:
            for sol in solutions:
                if y < margin + 120:
                    c.showPage()
                    draw_header(c)
                    y = height - margin - 30

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ—à–µ–Ω–∏—è
                solution_header = (
                    f"–†–µ—à–µ–Ω–∏–µ ID: {sol.id} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {sol.user.username} | "
                    f"–ó–∞–¥–∞—á–∞: {sol.task.title} | –°—Ç–∞—Ç—É—Å: {sol.status} | –î–∞—Ç–∞: {sol.created_at.strftime('%Y-%m-%d %H:%M')}"
                )
                header_lines = wrap_text(solution_header, max_text_width, c, "DejaVuSans-Bold", 12)
                c.setFont("DejaVuSans-Bold", 12)
                for line in header_lines:
                    c.drawString(margin, y, line)
                    y -= 15
                y -= 5

                c.setFont("DejaVuSans", 11)
                # –í—ã–≤–æ–¥ —à–∞–≥–æ–≤ —Ä–µ—à–µ–Ω–∏—è
                for step in sorted(sol.steps, key=lambda s: s.step_number):
                    step_text = f"–®–∞–≥ {step.step_number}: {step.input_expr} ‚Äî " + ("–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ" if step.is_correct else "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    if not step.is_correct:
                        step_text += f" (–û—à–∏–±–∫–∞: {step.error_type}; –ü–æ–¥—Å–∫–∞–∑–∫–∞: {step.hint})"
                    step_lines = wrap_text(step_text, max_text_width - 20, c, "DejaVuSans", 11)
                    for line in step_lines:
                        c.drawString(margin + 20, y, line)
                        y -= 12
                    if y < margin + 50:
                        c.showPage()
                        draw_header(c)
                        y = height - margin - 30

                y -= 10
                c.line(margin, y, width - margin, y)
                y -= 20

        c.showPage()
        c.save()
        buffer.seek(0)
        return send_file(buffer, as_attachment=True, download_name="report.pdf", mimetype="application/pdf")
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: %s", e)
        return jsonify({"message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç", "details": str(e)}), 500



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\requirements.txt ====
Flask
flask-cors
pymongo
python-dotenv
gunicorn
requests
google-generativeai
cloudinary
Flask-SQLAlchemy
reportlab
werkzeug
PyJWT
sympy


==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\routes.py ====
from flask import Flask, request, jsonify
from flask_cors import CORS
from models import db, Task, Solution, Step
from checker import check_step

app = Flask(__name__)
app.config.from_object("config.Config")
db.init_app(app)
CORS(app)

@app.route("/tasks", methods=["GET"])
def get_tasks():
    tasks = Task.query.all()
    return jsonify([{"id": t.id, "title": t.title, "description": t.description} for t in tasks])

@app.route("/tasks/<int:task_id>/start", methods=["POST"])
def start_solution(task_id):
    solution = Solution(task_id=task_id, status="in_progress")
    db.session.add(solution)
    db.session.commit()
    return jsonify({"solution_id": solution.id})

@app.route("/solutions/<int:solution_id>/check_step", methods=["POST"])
def check_solution_step(solution_id):
    data = request.json
    step_number = data.get("step_number")
    prev_expr = data.get("prev_expr", "")
    curr_expr = data.get("curr_expr", "")

    result = check_step(prev_expr, curr_expr)
    
    step = Step(solution_id=solution_id, step_number=step_number,
                input_expr=curr_expr, is_correct=result["is_correct"],
                error_type=result["error_type"], hint=result["hint"])
    
    db.session.add(step)
    db.session.commit()

    return jsonify(result)

@app.route("/solutions/<int:solution_id>/finish", methods=["POST"])
def finish_solution(solution_id):
    solution = Solution.query.get(solution_id)
    solution.status = "completed"
    db.session.commit()
    return jsonify({"message": "–†–µ—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"})

if __name__ == "__main__":
    with app.app_context():
        db.create_all()
    app.run(debug=True)



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\solutions.py ====
import logging
import sympy as sp
from flask import Blueprint, request, jsonify
from models import db, Task, Solution, Step
from checker import safe_sympify  # —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ checker.py

solutions_bp = Blueprint('solutions', __name__, url_prefix='/api/solutions')

@solutions_bp.route('/check', methods=['POST'])
def check_solution():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (—Å —à–∞–≥–∞–º–∏) —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ë–î.
    –û–∂–∏–¥–∞–µ—Ç—Å—è JSON –≤–∏–¥–∞:
    {
        "taskId": <–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏>,
        "steps": [
            "—à–∞–≥ 1", "—à–∞–≥ 2", ..., "LIMIT", "–æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"
        ]
    }
    –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success: true, –∏–Ω–∞—á–µ success: false —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫.
    """
    data = request.json
    logging.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ—à–µ–Ω–∏—è: %s", data)

    if not data or "taskId" not in data or "steps" not in data:
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"}), 400

    task_id = data["taskId"]
    steps = data["steps"]

    if not isinstance(steps, list) or any(not isinstance(s, str) for s in steps):
        return jsonify({"error": "steps –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å—Ç—Ä–æ–∫"}), 400

    task = Task.query.get(task_id)
    if not task:
        return jsonify({"error": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404

    x = sp.Symbol('x')
    errors = []  # —Å–æ–±–µ—Ä–µ–º –æ—à–∏–±–∫–∏ –ø–æ —à–∞–≥–∞–º
    algebraic_steps = []
    found_limit = False

    for step in steps:
        if step == "LIMIT":
            found_limit = True
            break
        algebraic_steps.append(step)

    if not algebraic_steps:
        return jsonify({
            "success": False,
            "errors": [{"step": 1, "error": "–ù–µ—Ç –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏—Ö —à–∞–≥–æ–≤", "hint": "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–≥"}]
        }), 200

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏—Ö —à–∞–≥–æ–≤
    for i in range(len(algebraic_steps) - 1):
        prev_expr = algebraic_steps[i]
        curr_expr = algebraic_steps[i + 1]
        try:
            prev_sym = sp.simplify(safe_sympify(prev_expr))
            curr_sym = sp.simplify(safe_sympify(curr_expr))
            if not prev_sym.equals(curr_sym):
                errors.append({
                    "step": i + 1,
                    "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
                    "expected": str(prev_sym),
                    "received": str(curr_sym),
                    "hint": f"–î–æ–ø—É—Å—Ç–∏–º–∞—è —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞: {prev_sym}"
                })
        except Exception as e:
            errors.append({
                "step": i + 1,
                "error": "–û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏",
                "details": str(e),
                "hint": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏"
            })

    computed_limit = None
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä LIMIT ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–µ–ª
    if found_limit:
        try:
            last_expr = sp.simplify(safe_sympify(algebraic_steps[-1]))
            computed_limit = sp.limit(last_expr, x, sp.oo)
            expected_limit = sp.simplify(safe_sympify(task.expected_limit))
            logging.info(f"–í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–µ–ª: {computed_limit}")
            if not sp.simplify(computed_limit - expected_limit).is_zero:
                errors.append({
                    "step": len(steps),
                    "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ–¥–µ–ª",
                    "expected": str(expected_limit),
                    "received": str(computed_limit),
                    "hint": f"–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expected_limit}"
                })
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –Ω–µ —Ä–∞–≤–µ–Ω "LIMIT" –∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç ‚Äì —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if steps[-1] != "LIMIT" and not errors:
                student_result = sp.simplify(safe_sympify(steps[-1]))
                if not sp.simplify(student_result - computed_limit).is_zero:
                    errors.append({
                        "step": len(steps),
                        "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
                        "expected": str(computed_limit),
                        "received": str(student_result),
                        "hint": f"–ü–æ—Å–ª–µ 'LIMIT' —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: {computed_limit}"
                    })
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–µ–¥–µ–ª–∞: {str(e)}")
            errors.append({
                "step": len(steps),
                "error": "–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞",
                "details": str(e),
                "hint": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ LIMIT"
            })

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ—à–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ user_id –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ —Å–µ—Å—Å–∏–∏)
    solution = Solution(task_id=task.id, user_id=1, status="in_progress")
    db.session.add(solution)
    db.session.commit()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥ —Ä–µ—à–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ Step
    for i, step in enumerate(steps, start=1):
        # –ï—Å–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —à–∞–≥–∞ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –µ—ë –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–∑ errors (–µ—Å–ª–∏ —Ç–∞–∫–æ–≤–∞—è –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞)
        # –ó–¥–µ—Å—å –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è: –µ—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã ‚Äì –≤—Å–µ —à–∞–≥–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏
        is_correct = False if errors else True
        new_step = Step(
            solution_id=solution.id,
            step_number=i,
            input_expr=step,
            is_correct=is_correct,
            error_type=None if is_correct else "–æ—à–∏–±–∫–∞",  # –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
            hint=""
        )
        db.session.add(new_step)
    db.session.commit()

    if errors:
        solution.status = "error"
        db.session.commit()
        return jsonify({"success": False, "errors": errors, "solution_id": solution.id}), 200

    solution.status = "completed"
    db.session.commit()
    return jsonify({
        "success": True,
        "message": f"–†–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ. –ü—Ä–µ–¥–µ–ª = {computed_limit}" if computed_limit is not None else "–†–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ",
        "solution_id": solution.id
    }), 200



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\tasks.py ====
from flask import Blueprint, request, jsonify
from models import db, Task

tasks_bp = Blueprint('tasks', __name__, url_prefix='/api/tasks')

@tasks_bp.route('', methods=['GET'])
def get_tasks():
    tasks = Task.query.all()
    tasks_list = []
    for t in tasks:
        tasks_list.append({
            "id": t.id,
            "title": t.title,
            "description": t.description,
            "expression": t.expression,
            "limitVar": t.limitVar,
            "expected_limit": t.expected_limit
        })
    return jsonify({"tasks": tasks_list}), 200

@tasks_bp.route('/<int:task_id>', methods=['GET'])
def get_task(task_id):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ ID.
    """
    task = Task.query.get(task_id)
    if not task:
        return jsonify({"message": "Task not found"}), 404
    return jsonify({
        "id": task.id,
        "title": task.title,
        "description": task.description,
        "expression": task.expression,
        "limitVar": task.limitVar,
        "expected_limit": task.expected_limit
    }), 200

@tasks_bp.route('', methods=['POST'])
def create_task():
    data = request.json
    required_fields = ['title', 'expression', 'limitVar', 'expected_limit']
    for field in required_fields:
        if field not in data:
            return jsonify({"message": f"{field} is required"}), 400

    new_task = Task(
        title=data['title'],
        description=data.get('description', ''),
        expression=data['expression'],
        limitVar=data['limitVar'],
        expected_limit=data['expected_limit']
    )
    db.session.add(new_task)
    db.session.commit()
    return jsonify({"message": "Task created successfully", "task_id": new_task.id}), 201

@tasks_bp.route('/<int:task_id>', methods=['PUT'])
def update_task(task_id):
    task = Task.query.get(task_id)
    if not task:
        return jsonify({"message": "Task not found"}), 404
    data = request.json
    task.title = data.get('title', task.title)
    task.description = data.get('description', task.description)
    task.expression = data.get('expression', task.expression)
    task.limitVar = data.get('limitVar', task.limitVar)
    task.expected_limit = data.get('expected_limit', task.expected_limit)
    db.session.commit()
    return jsonify({"message": "Task updated successfully"}), 200

@tasks_bp.route('/<int:task_id>', methods=['DELETE'])
def delete_task(task_id):
    task = Task.query.get(task_id)
    if not task:
        return jsonify({"message": "Task not found"}), 404
    db.session.delete(task)
    db.session.commit()
    return jsonify({"message": "Task deleted successfully"}), 200



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\utils\Auth\auth.py ====
from flask import Blueprint, request, jsonify
from werkzeug.security import generate_password_hash, check_password_hash
from models import db, User
import jwt
import datetime
from config import Config

auth_bp = Blueprint('auth', __name__, url_prefix='/api/auth')

@auth_bp.route('/signup', methods=['POST'])
def register():
    
    data = request.json
    required_fields = ['firstname', 'lastname', 'username', 'email', 'password']
    for field in required_fields:
        if field not in data:
            return jsonify({"message": f"{field} is required"}), 400

    if User.query.filter_by(username=data['username']).first():
        return jsonify({"message": "Username already exists"}), 400

    hashed_password = generate_password_hash(data['password'])
    new_user = User(
        firstname=data['firstname'],
        lastname=data['lastname'],
        username=data['username'],
        email=data['email'],
        password=hashed_password,
        bio=data.get('bio', ''),
        image=data.get('image', ''),
        role=data.get('role', 'student')
    )
    db.session.add(new_user)
    db.session.commit()

    return jsonify({"message": "User registered successfully"}), 201

@auth_bp.route('/login', methods=['POST'])
def login():
    data = request.json
    if 'username' not in data or 'password' not in data:
        return jsonify({"message": "Username and password are required"}), 400

    user = User.query.filter_by(username=data['username']).first()
    if user and check_password_hash(user.password, data['password']):
        token = jwt.encode({
            'user_id': user.id,
            'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=24)
        }, Config.SECRET_KEY, algorithm="HS256")
        return jsonify({
            "message": "Login successful",
            "token": token,
            "user": {
                "username": user.username,
                "firstname": user.firstname,
                "lastname": user.lastname,
                "email": user.email,
                "role": user.role
            }
        }), 200
    return jsonify({"message": "Invalid credentials"}), 401



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\utils\Auth\__init__.py ====



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\utils\Model\model.py ====
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

db = SQLAlchemy()

class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    firstname = db.Column(db.String(100), nullable=False)
    lastname = db.Column(db.String(100), nullable=False)
    username = db.Column(db.String(100), unique=True, nullable=False)
    email = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    bio = db.Column(db.Text, default="")
    image = db.Column(db.String(300), default="")
    role = db.Column(db.String(50), default="student")  # –∏–ª–∏ "admin"
    chat_history = db.Column(db.Text)  # –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å JSON –∫–∞–∫ —Å—Ç—Ä–æ–∫—É

    solutions = db.relationship('Solution', backref='user', lazy=True)

class Task(db.Model):
    __tablename__ = 'tasks'
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text)
    expression = db.Column(db.String(500), nullable=False)  # –∏—Å—Ö–æ–¥–Ω–æ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    limitVar = db.Column(db.String(50), nullable=False)      # –Ω–∞–ø—Ä–∏–º–µ—Ä "x->‚àû"
    expected_limit = db.Column(db.String(100), nullable=False)

    solutions = db.relationship('Solution', backref='task', lazy=True)

class Solution(db.Model):
    __tablename__ = 'solutions'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    task_id = db.Column(db.Integer, db.ForeignKey('tasks.id'), nullable=False)
    status = db.Column(db.String(50), default="in_progress")  # in_progress, completed, error
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    steps = db.relationship('Step', backref='solution', lazy=True)

class Step(db.Model):
    __tablename__ = 'steps'
    id = db.Column(db.Integer, primary_key=True)
    solution_id = db.Column(db.Integer, db.ForeignKey('solutions.id'), nullable=False)
    step_number = db.Column(db.Integer, nullable=False)
    input_expr = db.Column(db.String(500), nullable=False)
    is_correct = db.Column(db.Boolean, default=True)
    error_type = db.Column(db.String(100))
    hint = db.Column(db.String(300))



==== C:\Users\Admin\Downloads\LimitApp\LimitApp\server\utils\Model\__init__.py ====



